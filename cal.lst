                        ; -------------------------------------------------------------------
                        ; *** cal: displays a simple calendar in traditional format.
                        ; *** If arguments are not specified, the current month is displayed.
                        ; ***
                        ; *** Assembled with a modified version of the A18 assembler (includes
                        ; *** DC pseudo-op).
                        ; ***
                        ; *** Build #
                        ; ***  6: Changed highlighting from bold to reverse video.
                        ; ***  7: Expanded year limits to 1582-9999.
                        ; ***  8: Send VT1802 style highlight/normal sequences when
                        ; ***     that video card is in use
                        ; ***  9: Didn't read the VT1802 doc closely enough; 2nd try.
                        ; *** 10: Thought about VT1802 some more, came up with something more
                        ; ***     likely to work. (Such are the perils of writing code for h/w
                        ; ***     you don't have to test on!)
                        ; *******************************************************************
                        ; *** This software is copyleft 2021 by Wayne Hortensius          ***
                        ; *** All wrongs reserved.                                        ***
                        ; *******************************************************************
                        ;
                        	incl	"bios.inc"
                        ; *******************************************************************
                        ; *** This software is copyright 2006 by Michael H Riley		***
                        ; *** You have permission to use, modify, copy, and distribute	***
                        ; *** this software so long as this copyright notice is retained. ***
                        ; *** This software may not be used in commercial applications	***
                        ; *** without express written permission from the author.	 ***
                        ; *******************************************************************
                        
                        ; f_getdev bit values
                        
                        b_devIDE	equ	00000001b	; IDE
                        b_devFLPY	equ	00000010b	; floppy
                        b_devBBSER	equ	00000100b	; Bit-banged serial
                        b_devUART	equ	00001000b	; UART
                        b_devRTC	equ	00010000b	; RTC
                        b_devNVR	equ	00100000b	; NVRAM
                        
                        #ifndef _IS_BIOS
                        
                        ; Define address for standard BIOS vectors
                        BIOS	equ	0ff00h
                        
                        ; Define address for extended BIOS vectors
                        EBIOS	equ	0f800h
                        
                        scall	equ	r4			; register for SCALL
                        sret	equ	r5			; register for SRET
                        
                        f_boot		equ	(BIOS+00h)	; boot from ide device
                        f_type		equ	(BIOS+03h)	; type 1 character to console
                        f_read		equ	(BIOS+06h)	; read 1 character from console
                        f_msg		equ	(BIOS+09h)	; type asciiz string to console
                        f_typex		equ	(BIOS+0ch)	; depricated, just returns now
                        f_input		equ	(BIOS+0fh)	; read asciiz from console
                        f_strcmp	equ	(BIOS+12h)	; compare 2 strings
                        f_ltrim		equ	(BIOS+15h)	; trim leading spaces
                        f_strcpy	equ	(BIOS+18h)	; copy an asciiz string
                        f_memcpy	equ	(BIOS+1bh)	; copy memory
                        f_wrtsec	equ	(BIOS+1eh)	; write floppy sector (depricated)
                        f_rdsec		equ	(BIOS+21h)	; read floppy sector (depricated)
                        f_seek0		equ	(BIOS+24h)	; floppy seek to track 0 (depricated)
                        f_seek		equ	(BIOS+27h)	; floopy track seek (depricated)
                        f_drive		equ	(BIOS+2ah)	; select floppy drive (depricated)
                        f_setbd		equ	(BIOS+2dh)	; set console baud rate
                        f_mul16		equ	(BIOS+30h)	; 16-bit multiply
                        f_div16		equ	(BIOS+33h)	; 16-bit division
                        f_idereset	equ	(BIOS+36h)	; reset ide device
                        f_idewrite	equ	(BIOS+39h)	; write ide sector
                        f_ideread	equ	(BIOS+3ch)	; read ide sector
                        f_initcall	equ	(BIOS+3fh)	; initialize R4 and R5
                        f_bootide	equ	(BIOS+42h)	; boot from ide device
                        f_hexin		equ	(BIOS+45h)	; convert ascii number to hex
                        f_hexout2	equ	(BIOS+48h)	; convert hex to 2-digit ascii
                        f_hexout4	equ	(BIOS+4bh)	; convert hex to 4-digit ascii
                        f_tty		equ	(BIOS+4eh)	; type character to console
                        f_mover		equ	(BIOS+51h)	; program relocator
                        f_minimon	equ	(BIOS+54h)	; mini monitor
                        f_freemem	equ	(BIOS+57h)	; determine memory size
                        f_isnum		equ	(BIOS+5ah)	; determine if D is numeric
                        f_atoi		equ	(BIOS+5dh)	; convert ascii to integer
                        f_uintout	equ	(BIOS+60h)	; convert unsigned integer to ascii
                        f_intout	equ	(BIOS+63h)	; convert signed integer to ascii
                        f_inmsg		equ	(BIOS+66h)	; type in-line message
                        f_inputl	equ	(BIOS+69h)	; read limited line from console
                        f_brktest	equ	(BIOS+6ch)	; check for serial break
                        f_findtkn	equ	(BIOS+6fh)	; find token in a token table
                        f_isalpha	equ	(BIOS+72h)	; determine if D is alphabetic
                        f_ishex		equ	(BIOS+75h)	; determine if D is hexadecimal
                        f_isalnum	equ	(BIOS+78h)	; determine if D is alpha or numeric
                        f_idnum		equ	(BIOS+7bh)	; determine type of ascii number
                        f_isterm	equ	(BIOS+7eh)	; determine if D is a termination char
                        f_getdev	equ	(BIOS+81h)	; get supported devices
                        
                        f_version	equ	(BIOS+0f9h)	; 3 bytes holding bios version number
                        
                        ; "Extended" BIOS vectors
                        
                        f_bread		equ	(EBIOS+00h)	; read from onboard serial port
                        f_btype		equ	(EBIOS+03h)	; write to onboard serial port
                        f_btest		equ	(EBIOS+06h)	; test onboard serial port
                        f_utype		equ	(EBIOS+09h)	; write to disk board UART
                        f_uread		equ	(EBIOS+0ch)	; read from disk board UART
                        f_utest		equ	(EBIOS+0fh)	; test disk board UART
                        f_usetbd	equ	(EBIOS+12h)	; set disk board UART baud rate and format
                        f_gettod	equ	(EBIOS+15h)	; read time of day clock
                        f_settod	equ	(EBIOS+18h)	; set time of day clock
                        f_rdnvr		equ	(EBIOS+1bh)	; read non volatile RAM
                        f_wrnvr		equ	(EBIOS+1eh)	; write non volatile RAM
                        f_idesize	equ	(EBIOS+21h)	; return size of attached IDE drive(s)
                        f_ideid		equ	(EBIOS+24h)	; return device data for IDE drive(s)
                        f_tmtoas	equ	(EBIOS+2ah)	; time to ASCII string
                        f_dttoas	equ	(EBIOS+27h)	; date to ASCII string
                        f_rtctest	equ	(EBIOS+2dh)	; test size and presence of RTC/NVR
                        f_astodt	equ	(EBIOS+30h)	; convert ASCII string to date
                        f_astotm	equ	(EBIOS+33h)	; convert ASCII string to time
                        f_nvrcchk	equ	(EBIOS+36h)	; compute NVR checksum
                        
                        #endif
                        
                        	incl	"kernel.inc"
                        O_CLDBOOT: equ     0300h               ; jump to cold boot routine
                        O_WRMBOOT: equ     0303h               ; jump to warm boot routine
                        O_OPEN:    equ     0306h               ; open a file
                        O_READ:    equ     0309h               ; read from file
                        O_WRITE:   equ     030ch               ; write to file
                        O_SEEK:    equ     030fh               ; seek to file position
                        O_CLOSE:   equ     0312h               ; close file
                        O_OPENDIR: equ     0315h               ; open dir as a file
                        O_DELETE:  equ     0318h               ; delete a file
                        O_RENAME:  equ     031bh               ; rename a file
                        O_EXEC:    equ     031eh               ; execute an external program
                        O_MKDIR:   equ     0321h               ; make directory
                        O_CHDIR:   equ     0324h               ; change directory
                        O_RMDIR:   equ     0327h               ; remove directory
                        O_RDLUMP:  equ     032Ah               ; read LAT entry
                        O_WRLUMP:  equ     032Dh               ; write LAT entry
                        O_TYPE:    equ     0330h               ; passthrough for console output
                        O_MSG:     equ     0333h               ; passthrough for console output
                        O_READKEY: equ     0336h               ; passthrough for console input
                        O_INPUT:   equ     0339h               ; passthrough for console input
                        O_PRTSTAT: equ     033ch               ; printer status
                        O_PRINT:   equ     033fh               ; output to printer
                        O_EXECBIN: equ     0342h               ; execute from default directory
                        O_SETDEF:  equ     0345h               ; set/get default directory
                        O_KINIT:   equ     0348h               ; reserved - do not use!!!
                        O_INMSG:   equ     034bh               ; passthrough for console output
                        O_GETDEV:  equ     034eh               ; passthrough to f_getdef
                        O_GETTOD:  equ     0351h               ; passthrough to f_gettod
                        O_SETTOD:  equ     0354h               ; passthrough to f_settod
                        O_INPUTL:  equ     0357h               ; passthrough to f_inputl
                        O_BOOT:    equ     035ah               ; passthrough to f_boot
                        O_TTY:     equ     035dh               ; passthrough to f_tty
                        O_SETBD:   equ     0360h               ; passthrough to f_setbd
                        O_INITCALL: equ    0363h               ; passthrough to f_initcall
                        O_BRKTEST: equ     0366h               ; passthrough to f_brktest
                        O_DEVCTRL: equ     0369h               ; passthrough to deverr
                        O_ALLOC:   equ     036ch               ; passthrough to alloc
                        O_DEALLOC: equ     036fh               ; passthrough to dealloc
                        I_SERVE:   equ     03f6h               ; address of interrupt chain head
                        V_IVEC:    equ     03fdh               ; interrupt head
                        V_DVEC:    equ     036ah               ; device head
                        K_VER:     equ     0400h               ; kernel version number
                        K_BUILD:   equ     0403h               ; kernel build number
                        K_BMONTH:  equ     0405h               ; kernel build month
                        K_BDAY:    equ     0406h               ; kernel build day
                        K_BYEAR:   equ     0407h               ; kernel build month
                        K_HIMEM:   equ     0442h               ; high memory pointer
                        K_HEAP:    equ     044dh               ; heap pointer
                        K_CLKFREQ: equ     0470h               ; system clock frequency
                        K_MONTH:   equ     0475h               ; date/time
                        K_DAY:     equ     0476h
                        K_YEAR:    equ     0477h
                        K_HOUR:    equ     0478h
                        K_MINUTE:  equ     0479h
                        K_SECOND:  equ     047ah
                        K_SECDEN:  equ     047bh
                        K_SECNUM:  equ     047dh
                        ;
                        ;O_HIMEM:   equ     0442h               ; himem value
                        O_DATTIM:  equ     0475h               ; date/time block
                        ;
                        errexists: equ     1
                        errnoffnd: equ     2
                        errinvdir: equ     3
                        errisdir:  equ     4
                        errdirnotempty: equ   5
                        errnotexec:     equ   6
                        ;
                        O_CREAT	equ	00000001b
                        O_TRUNC	equ	00000010b
                        O_APPND	equ	00000100b
                        
                        ;
                        ; ************************************************************
                        ; This block generates the Execution header for a stand-alone
                        ; program. It begins 6 bytes before the program start.
                        ; ************************************************************
                        ;
                        	org	02000h-6	; Header starts at 01ffah
   1ffa   20 00         	dw	2000h
   1ffc   04 bd         	dw	endrom-2000h
   1ffe   20 00         	dw	2000h
                        ;
   2000   30 28         	br	Start
                        ; **************************************************
                        ; Build date format:
                        ; 80h+month, day, four digit year
                        ; **************************************************
                        ; 80h month offset indicates extended
                        ; build information, with build number and text.
                        ; **************************************************
                        ;
   2002   87            date:	db	80h+7		; Month: July
   2003   15            	db	21		; Day 21
   2004   07 e5         	dw	2021		; year = 2021
                        ;
   2006   00 0b         build:	dw	11		; build number
   2008   40 43 6f 70   	db	'@Copyleft 2021 Wayne Hortensius',0
   200c   79 6c 65 66   
   2010   74 20 32 30   
   2014   32 31 20 57   
   2018   61 79 6e 65   
   201c   20 48 6f 72   
   2020   74 65 6e 73   
   2024   69 75 73 00   
                        ;
                        cr	equ	13
                        lf	equ	10
                        tab	equ	9
                        bell	equ	7
                        esc	equ	27
                        bs	equ	8
                        ;
                        Start:
   2028   c0 20 f7      	lbr	Main
                        Help:
   202b   d4 ff 66      	call	f_inmsg
   202e   43 61 6c 65   	db	'Calendar, version 1.0',cr,lf
   2032   6e 64 61 72   
   2036   2c 20 76 65   
   203a   72 73 69 6f   
   203e   6e 20 31 2e   
   2042   30 0d 0a      
   2045   20 20 53 79   	db	'  Syntax:',cr,lf
   2049   6e 74 61 78   
   204d   3a 0d 0a      
   2050   09 63 61 6c   	db	tab,'cal -h',tab,tab,'- Help',cr,lf,0
   2054   20 2d 68 09   
   2058   09 2d 20 48   
   205c   65 6c 70 0d   
   2060   0a 00         
                        ;
   2062   f8 24 bf f8   	load	rf,HasClock
   2066   bd af         
   2068   0f            	ldn	rf
   2069   32 8b         	bz	Help2
   206b   d4 ff 66      	call	f_inmsg
   206e   09 63 61 6c   	db	tab,'cal',tab,tab,'- Show current month',cr,lf,0
   2072   09 09 2d 20   
   2076   53 68 6f 77   
   207a   20 63 75 72   
   207e   72 65 6e 74   
   2082   20 6d 6f 6e   
   2086   74 68 0d 0a   
   208a   00            
                        Help2:
   208b   d4 ff 66      	call	f_inmsg
   208e   09 63 61 6c   	db	tab,'cal month year',tab,'- Show specified month',cr,lf
   2092   20 6d 6f 6e   
   2096   74 68 20 79   
   209a   65 61 72 09   
   209e   2d 20 53 68   
   20a2   6f 77 20 73   
   20a6   70 65 63 69   
   20aa   66 69 65 64   
   20ae   20 6d 6f 6e   
   20b2   74 68 0d 0a   
   20b6   09 09 6d 6f   	db	tab,tab,'month',tab,'= 1-12 or Jan-Dec',cr,lf
   20ba   6e 74 68 09   
   20be   3d 20 31 2d   
   20c2   31 32 20 6f   
   20c6   72 20 4a 61   
   20ca   6e 2d 44 65   
   20ce   63 0d 0a      
   20d1   09 09 79 65   	db	tab,tab,'year',tab,'= 1-99 or 1582-9999',0
   20d5   61 72 09 3d   
   20d9   20 31 2d 39   
   20dd   39 20 6f 72   
   20e1   20 31 35 38   
   20e5   32 2d 39 39   
   20e9   39 39 00      
                        Exit:
   20ec   f8 25 bf f8   	load	rf,saveStack	; restore Elf/OS's stack
   20f0   08 af         
   20f2   4f            	lda	rf
   20f3   b2            	phi	r2
   20f4   0f            	ldn	rf
   20f5   a2            	plo	r2
   20f6   d5            	retn			; return to Elf/OS
                        ;-----------------------
                        Main:
   20f7   f8 25 bf f8   	load	rf,saveStack	; save Elf/OS's stack
   20fb   08 af         
   20fd   92            	ghi	r2
   20fe   5f            	str	rf
   20ff   1f            	inc	rf
   2100   82            	glo	r2
   2101   5f            	str	rf
   2102   f8 25 b2 f8   	load	r2,localStack	; use our own stack
   2106   07 a2         
                        	
   2108   d4 24 af      	call	HasRTC
   210b   f8 24 bf f8   	load	rf,HasClock
   210f   bd af         
   2111   f8 00         	ldi	0		; D = 0x00 (doesn't have RTC)
   2113   cb 21 18      	lbnf	NoClk
   2116   ff 01         	smi	1		; D = 0xFF (has RTC)
   2118   5f            NoClk:	str	rf
   2119   f8 24 bf f8   	load	rf,Day
   211d   c0 af         
   211f   f8 00         	ldi	0		; zero out day
   2121   5f            	str	rf		; (so no day hilited if command tail)
   2122   d4 23 68      	call	crlf
                        SkipSpaces:
   2125   4a            	lda	ra		; skip over any spaces
   2126   ff 20         	smi	' '
   2128   c2 21 25      	lbz	SkipSpaces
   212b   2a            	dec	ra		; move back to non-space character
   212c   0a            	ldn	ra		; get byte
   212d   ca 21 6b      	lbnz	DoTail		; there was a cmd tail, process it
                        ;
   2130   f8 24 bf f8   	load	rf,HasClock
   2134   bd af         
   2136   0f            	ldn	rf		; no cmd tail, get system time if we can
   2137   c2 21 46      	lbz	NoClkMsg	; no system clock to check, aww!
                        ;
   213a   f8 24 bf f8   	load	rf,DateBlk	; point to kernel date/time
   213e   bf af         
   2140   d4 f8 15      	call	f_gettod	; call BIOS to get current date/time from RTC
   2143   cb 21 57      	lbnf	GotTime
                        NoClkMsg:
   2146   d4 ff 66      	call	f_inmsg
   2149   07 4e 6f 20   	db	bell,'No RTC',cr,lf,lf,0
   214d   52 54 43 0d   
   2151   0a 0a 00      
   2154   c0 20 2b      	lbr	Help
                        ;
                        GotTime:
   2157   f8 24 bf f8   	load	rf,Year
   215b   c1 af         
   215d   0f            	ldn	rf		; convert offset year to absolute
   215e   fc b4         	adi	low 1972	; binary year
   2160   1f            	inc	rf
   2161   5f            	str	rf		; store low byte of absolute year
   2162   2f            	dec	rf
   2163   f8 00         	ldi	0
   2165   7c 07         	adci	high 1972
   2167   5f            	str	rf		; store high byte of absolute year
   2168   c0 21 fa      	lbr	ShowCal		; show the current month calendar
                        DoTail:
   216b   ff 2d         	smi	'-'
   216d   0a            	ldn	ra
   216e   ca 21 79      	lbnz	DoTailX
   2171   1a            	inc	ra
   2172   0a            	ldn	ra
   2173   ff 68         	smi	'h'
   2175   0a            	ldn	ra
   2176   c2 20 2b      	lbz	Help
                        DoTailX:
   2179   d4 ff 5a      	call	f_isnum		; 1st non blank char: is it 0..9?
   217c   8a            	glo	ra
   217d   af            	plo	rf
   217e   9a            	ghi	ra
   217f   bf            	phi	rf
   2180   cb 21 99      	lbnf	MonName		; nope, try a month name
   2183   d4 ff 5d      	call	f_atoi		; get month #
   2186   0f            	ldn	rf
   2187   ff 20         	smi	' '
   2189   ca 20 2b      	lbnz	Help
   218c   9d            	ghi	rd
   218d   ca 20 2b      	lbnz	Help		; out of range [1..12]
   2190   8d            	glo	rd
   2191   ff 0d         	smi	12+1
   2193   c3 20 2b      	lbdf	Help		; out of range [1..12]
   2196   c0 21 a8      	lbr	DoYear
                        MonName:
   2199   d4 23 d4      	call	MatchMonthName
   219c   c2 20 2b      	lbz	Help
   219f   ad            	plo	rd
                        SkipRest:
   21a0   4f            	lda	rf
   21a1   d4 ff 72      	call	f_isalpha
   21a4   c3 21 a0      	lbdf	SkipRest
   21a7   2f            	dec	rf		; back up to first non alpha char
                        DoYear:
   21a8   f8 24 ba f8   	load	ra,Month
   21ac   bf aa         
   21ae   8d            	glo	rd
   21af   5a            	str	ra		; save month #
                        SkipYearSpaces:
   21b0   4f            	lda	rf		; skip over any spaces
   21b1   ff 20         	smi	' '
   21b3   c2 21 b0      	lbz	SkipYearSpaces
   21b6   2f            	dec	rf		; move back to non-space character
   21b7   0f            	ldn	rf
   21b8   c2 20 2b      	lbz	Help		; needed a year, we're done
   21bb   d4 ff 5a      	call	f_isnum		; is it a digit?
   21be   cb 20 2b      	lbnf	Help		; nope, we're done
   21c1   d4 ff 5d      	call	f_atoi		; get year
   21c4   0f            	ldn	rf		; end of command tail?
   21c5   ca 20 2b      	lbnz	Help		; jump if not
   21c8   9d            	ghi	rd
   21c9   ca 21 df      	lbnz	FullYear
   21cc   8d            	glo	rd
   21cd   c2 20 2b      	lbz	Help		; year 0's no good
                        DoYear1:
   21d0   8d            	glo	rd
   21d1   ff 64         	smi	100
   21d3   c3 21 df      	lbdf	FullYear
   21d6   8d            	glo	rd
   21d7   fc d0         	adi	low 2000	; 2 digit years assumed 20xx
   21d9   ad            	plo	rd
   21da   f8 00         	ldi	0
   21dc   7c 07         	adci	high 2000
   21de   bd            	phi	rd
                        FullYear:
   21df   f8 24 bf f8   	load	rf,Year+1
   21e3   c2 af         
   21e5   8d            	glo	rd
   21e6   5f            	str	rf
   21e7   ff 2e         	smi	low 1582	; ZCAL limited the calendar
   21e9   2f            	dec	rf		; to 1766..2499, though I'm
   21ea   9d            	ghi	rd		; not away of any such
   21eb   5f            	str	rf		; limitation in Zeller's
   21ec   7f 06         	smbi	high 1582	; congruence
   21ee   cb 20 2b      	lbnf	Help
                        ;
   21f1   8d            	glo	rd
   21f2   ff 10         	smi	low (9999+1)
   21f4   9d            	ghi	rd
   21f5   7f 27         	smbi	high (9999+1)
   21f7   c3 20 2b      	lbdf	Help
                        ;
                        ShowCal:
   21fa   f8 20         	ldi	' '
   21fc   d4 03 30      	call	O_TYPE
   21ff   f8 24 bf f8   	load	rf,MonthNames
   2203   30 af         
   2205   f8 24 bd f8   	load	rd,DateBlk
   2209   bf ad         
   220b   0d            	ldn	rd		; month #
   220c   fd 0c         	sdi	12		; D = 12-month #
   220e   d4 24 7c      	call	prtTblStr	; print month name
                        ;	
   2211   f8 24 bf f8   	load	rf,Year
   2215   c1 af         
   2217   4f            	lda	rf		; high byte of year
   2218   bd            	phi	rd
   2219   0f            	ldn	rf		; low byte of year
   221a   ad            	plo	rd
   221b   f8 25 bf f8   	load	rf,buffer
   221f   0a af         
   2221   d4 ff 60      	call	f_uintout
   2224   f8 00         	ldi	0
   2226   5f            	str	rf
   2227   f8 25 bf f8   	load	rf,buffer
   222b   0a af         
   222d   d4 03 33      	call	O_MSG		; print year
                        ;
   2230   d4 ff 66      	call	f_inmsg
   2233   0d 0a         	db	cr,lf
   2235   20 53 75 6e   	db	' Sun Mon Tue Wed Thu Fri Sat'
   2239   20 4d 6f 6e   
   223d   20 54 75 65   
   2241   20 57 65 64   
   2245   20 54 68 75   
   2249   20 46 72 69   
   224d   20 53 61 74   
   2251   0d 0a 00      	db	cr,lf,0
                        ;
   2254   f8 24 b7 f8   	load	r7,DateBlk
   2258   bf a7         
   225a   d4 23 6f      	call	GetDOW		; get the DOW of the 1st of the month
   225d   27            	dec	r7		; r7 -> DOW1st
   225e   57            	str	r7		; store DOW of 1st day of month
   225f   17            	inc	r7		; r7 -> Month
   2260   87            	glo	r7
   2261   af            	plo	rf
   2262   97            	ghi	r7
   2263   bf            	phi	rf
   2264   f8 24 bd f8   	load	rd,Date2Blk
   2268   c3 ad         
   226a   f8 04         	ldi	4
   226c   ac            	plo	rc
   226d   f8 00         	ldi	0
   226f   bc            	phi	rc
   2270   d4 ff 1b      	call	f_memcpy	; copy DateBlk to Date2Blk
                        
   2273   2d            	dec	rd
   2274   2d            	dec	rd
   2275   2d            	dec	rd
   2276   2d            	dec	rd		; rd -> Date2Blk
                        
   2277   0d            	ldn	rd
   2278   fc 01         	adi	1
   227a   5d            	str	rd		; store next month
   227b   ff 0d         	smi	13
   227d   ca 22 91      	lbnz	NextMonth
   2280   f8 01         	ldi	1
   2282   5d            	str	rd
   2283   1d            	inc	rd
   2284   1d            	inc	rd		; rd -> high byte of year
   2285   4d            	lda	rd		; rf.1 = m(rd), rf.0 = m(rd+1)
   2286   bf            	phi	rf
   2287   0d            	ldn	rd
   2288   af            	plo	rf
   2289   1f            	inc	rf		; rf = next year
   228a   8f            	glo	rf
   228b   5d            	str	rd
   228c   2d            	dec	rd
   228d   9f            	ghi	rf
   228e   5d            	str	rd
   228f   2d            	dec	rd
   2290   2d            	dec	rd		; rd -> Date2Blk
                        NextMonth:
   2291   8d            	glo	rd
   2292   a7            	plo	r7
   2293   9d            	ghi	rd
   2294   b7            	phi	r7
   2295   d4 23 6f      	call	GetDOW		; get the DOW of 1st of the next month
   2298   27            	dec	r7
   2299   27            	dec	r7
   229a   27            	dec	r7
   229b   27            	dec	r7
   229c   27            	dec	r7		; r7 -> DOW1st
   229d   fc 07         	adi	7
   229f   e7            	sex	r7
   22a0   f7            	sm
   22a1   e2            	sex	r2
                        DaysInMonth:
   22a2   fc 07         	adi	7		; figure out how many days in the month
   22a4   bb            	phi	rb		; (all months have at least 28 days)
   22a5   ff 1c         	smi	28
   22a7   9b            	ghi	rb
   22a8   cb 22 a2      	lbnf	DaysInMonth
   22ab   ac            	plo	rc		; rc = # of days in the month
   22ac   f8 01         	ldi	1		; start with 1st day of month
   22ae   a9            	plo	r9
   22af   f8 00         	ldi	0
   22b1   a8            	plo	r8		; reset "VT1802 esc seq used space" flag
   22b2   07            	ldn	r7		; fetch DOW1st
   22b3   17            	inc	r7
   22b4   17            	inc	r7		; r7 -> day of month
   22b5   c2 22 cd      	lbz	FullWeek	; month starts on Sunday, so full week
   22b8   aa            	plo	ra
   22b9   f8 07         	ldi	7
   22bb   ab            	plo	rb		; # days remaining in first week
                        MoveFirst:
   22bc   d4 ff 66      	call	f_inmsg		; space over to 1st of month
   22bf   20 20 20 20   	db	'    ',0
   22c3   00            
   22c4   2b            	dec	rb
   22c5   2a            	dec	ra
   22c6   8a            	glo	ra
   22c7   ca 22 bc      	lbnz	MoveFirst
   22ca   c0 22 d0      	lbr	WeekLoop
                        FullWeek:
   22cd   f8 07         	ldi	7
   22cf   ab            	plo	rb		; # of days in this week to print
                        WeekLoop:
   22d0   88            	glo	r8		; only print 1 leading space after
   22d1   ca 22 d9      	lbnz	LeadingSpace	; highlighting the current day on the
   22d4   f8 20         	ldi	' '		; VT1802 board (reverse/normal video
   22d6   d4 03 30      	call	O_TYPE		; occupies a character spot afaict)
                        LeadingSpace:
   22d9   f8 20         	ldi	' '
   22db   d4 03 30      	call	O_TYPE
   22de   f8 00         	ldi	0		; reset VT1802 flag
   22e0   a8            	plo	r8
                        ;
   22e1   89            	glo	r9
   22e2   e7            	sex	r7
   22e3   f7            	sm
   22e4   e2            	sex	r2
   22e5   ca 22 ff      	lbnz	NotToday1
   22e8   f8 23 bf f8   	load	rf,ansi_hilite
   22ec   56 af         
   22ee   9e            	ghi	re		; check to see if the VT1802
   22ef   fa fe         	ani	0feh		; video card is active, and if
   22f1   fb fe         	xri	0feh		; so, use a VT52 video hilite
   22f3   ca 22 fc      	lbnz	hilite_day
   22f6   f8 23 bf f8   	load	rf,vt52_hilite
   22fa   5f af         
                        hilite_day:
   22fc   d4 03 33      	call	O_MSG
                        NotToday1:
   22ff   89            	glo	r9		; day of month < 10 ?
   2300   ff 0a         	smi	10
   2302   c3 23 0a      	lbdf	Gt10
   2305   f8 20         	ldi	' '
   2307   d4 03 30      	call	O_TYPE		; yes, print a leading blank
   230a   89            Gt10:	glo	r9
   230b   ad            	plo	rd
   230c   f8 00         	ldi	0
   230e   bd            	phi	rd
   230f   f8 25 bf f8   	load	rf,buffer
   2313   0a af         
   2315   d4 ff 60      	call	f_uintout
   2318   f8 00         	ldi	0
   231a   5f            	str	rf
   231b   f8 25 bf f8   	load	rf,buffer
   231f   0a af         
   2321   d4 03 33      	call	O_MSG		; print day of month
                        
   2324   89            	glo	r9
   2325   e7            	sex	r7
   2326   f7            	sm
   2327   e2            	sex	r2
   2328   ca 23 45      	lbnz	NotToday2
   232b   f8 23 bf f8   	load	rf,ansi_normal
   232f   5b af         
   2331   9e            	ghi	re		; check to see if the VT1802
   2332   fa fe         	ani	0feh		; video card is active, and if
   2334   fb fe         	xri	0feh		; so, use a VT52 video normal string
   2336   ca 23 42      	lbnz	normal_day
   2339   f8 01         	ldi	1		; set "only one space" flag after VT1802
   233b   a8            	plo	r8		; escape sequence
   233c   f8 23 bf f8   	load	rf,vt52_normal
   2340   64 af         
                        normal_day:
   2342   d4 03 33      	call	O_MSG
                        NotToday2:
   2345   19            	inc	r9		; next day of month
   2346   2c            	dec	rc
   2347   8c            	glo	rc
   2348   c2 20 ec      	lbz	Exit
   234b   2b            	dec	rb
   234c   8b            	glo	rb
   234d   ca 22 d0      	lbnz	WeekLoop
   2350   d4 23 68      	call	crlf
   2353   c0 22 cd      	lbr	FullWeek
                        ;
   2356   1b 5b 37 6d   ansi_hilite:	db	esc,'[7m',0	; ANSI hilight today
   235a   00            
   235b   1b 5b 6d 00   ansi_normal:	db	esc,'[m',0	; ANSI end hilight of today
   235f   08 1b 4e 50   vt52_hilite:	db	bs,esc,'NP',0	; VT1802 hilight today
   2363   00            
   2364   1b 4e 40 00   vt52_normal:	db	esc,'N@',0	; VT1802 end hilight of today
                        ;------------------------
   2368   d4 ff 66      crlf:	call	f_inmsg
   236b   0d 0a 00      	db	cr,lf,0
   236e   d5            	retn
                        ;------------------------
                        ;
                        ; Zeller's Congruence algorithm for determining
                        ;  the day of the week of the 1st of a month
                        ;
                        ; IN: r7   = address of date/time block m/d/yy
                        ; OUT D    = day of week (0-6, Sunday-Saturday)
                        ;
                        ; ALTERS r8,r9,ra,rb,rc,rd
                        ;
   236f   07            GetDOW:	ldn	r7		; month
   2370   ff 03         	smi	3		; march - december?
   2372   17            	inc	r7
   2373   17            	inc	r7		; R7 -> high byte of year word
   2374   47            	lda	r7
   2375   bf            	phi	rf
   2376   07            	ldn	r7		; fetch low byte of year word
   2377   af            	plo	rf
   2378   c3 23 7c      	lbdf	GetDOW1		; DF=1 if month >= 3
   237b   2f            	dec	rf		; --year for january & february
                        GetDOW1:
   237c   f8 00 bd f8   	load	rd,100
   2380   64 ad         
   2382   d4 ff 33      	call	f_div16		; RB=year DIV 100 (century), RF=year MOD 100
   2385   8b            	glo	rb
   2386   aa            	plo	ra		; save century
   2387   f8 05         	ldi	low 5
   2389   ad            	plo	rd
   238a   f8 00         	ldi	low 0
   238c   bd            	phi	rd
   238d   d4 ff 30      	call	f_mul16		; RB = 5 * (year MOD 100)
   2390   9b            	ghi	rb
   2391   f6            	shr
   2392   bb            	phi	rb
   2393   8b            	glo	rb
   2394   76            	shrc
   2395   ab            	plo	rb
   2396   9b            	ghi	rb
   2397   f6            	shr
   2398   bb            	phi	rb
   2399   8b            	glo	rb
   239a   76            	shrc
   239b   ab            	plo	rb		; RB = 5 * (year mod 100) DIV 4
                        
   239c   27            	dec	r7		; R7 -> high byte of year word
   239d   27            	dec	r7		; R7 -> day
   239e   27            	dec	r7		; R7 -> month
   239f   f8 c7         	ldi	low (valtab-1)
   23a1   e7            	sex	r7
   23a2   f4            	add
   23a3   e2            	sex	r2
   23a4   ac            	plo	rc
   23a5   f8 23         	ldi	high (valtab-1)
   23a7   7c 00         	adci	0
   23a9   bc            	phi	rc		; index into valtab
   23aa   8b            	glo	rb
   23ab   ec            	sex	rc
   23ac   f4            	add			; result = (13 * month - 1 ) DIV 5 + 5 * year MOD 100) DIV 4
   23ad   e2            	sex	r2
   23ae   52            	str	r2		; save result
   23af   8a            	glo	ra
   23b0   f6            	shr
   23b1   f6            	shr			; century DIV 4
   23b2   f4            	add			; result += century DIV 4
   23b3   52            	str	r2
   23b4   8a            	glo	ra
   23b5   fe            	shl			; century * 2
   23b6   f5            	sd			; D = century * 2 - result
   23b7   52            	str	r2
   23b8   c3 23 c0      	lbdf	GetDOW3		; branch if result >= 0
                        GetDOW2:
   23bb   fc 07         	adi	7
   23bd   cb 23 bb      	lbnf	GetDOW2		; loop until result >= 0
                        GetDOW3:
   23c0   ff 07         	smi	7		; do MOD 7
   23c2   c3 23 c0      	lbdf	GetDOW3		; loop until result < 0
   23c5   fc 07         	adi	7		; MOD 7 done
   23c7   d5            	retn
                        ;
                        ;	Precomputed (13 * month) DIV 5 values
                        ;
   23c8   1d 20 03 06   valtab:	db	29,32,3,6,8,11,13,16,19,21,24,26
   23cc   08 0b 0d 10   
   23d0   13 15 18 1a   
                        ;------------------------
                        ;
                        ;  MatchMonthName: find a unique prefix match for a NUL terminated string
                        ;	   in a table of strings
                        ;  IN: rf -> space terminated string to match
                        ;  OUT: D -> 1 based string index (0 if not found)
                        ;
                        ;  ALTERS: r7, r8, r9, ra, rb, rc, rd
                        ;
                        MatchMonthName:
   23d4   f8 24 bd f8   	load	rd,MonthNames
   23d8   30 ad         
   23da   f8 00         	ldi	0
   23dc   a7            	plo	r7		; R7 is longest substring matched so far
   23dd   a8            	plo	r8		; R8 is match # (0 means no match)
   23de   f8 0c         	ldi	12		; # month names to search
   23e0   ab            	plo	rb		; RB is loop counter
                        MonthLoop:
   23e1   8f            	glo	rf
   23e2   a9            	plo	r9
   23e3   9f            	ghi	rf
   23e4   b9            	phi	r9		; r9 is working cmd tail ptr
   23e5   f8 ff         	ldi	0ffh
   23e7   ac            	plo	rc		; rc is working matched substring length 
                        ChkNextChr:
   23e8   1d            	inc	rd		; next byte in table
   23e9   1c            	inc	rc		; # chars matched
   23ea   09            	ldn	r9		; char from cmd tail
   23eb   ff 61         	smi	'a'
   23ed   49            	lda	r9
   23ee   cb 23 f3      	lbnf	NotLower
   23f1   fa df         	ani	not 20h		; make upper case
                        NotLower:
   23f3   ed            	sex	rd
   23f4   f3            	xor			; compare to month char
   23f5   fa df         	ani	not 20h		; make it case insensitive
   23f7   e2            	sex	r2
   23f8   c2 23 e8      	lbz	ChkNextChr
   23fb   fb 80         	xri	80h
   23fd   ca 24 09      	lbnz	FindEoS		; jump if wasn't last char in table entry
   2400   1c            	inc	rc		; matched a complete table entry
   2401   09            	ldn	r9
   2402   ff 20         	smi	' '
   2404   ca 24 09      	lbnz	FindEoS		; end of month name?
   2407   8b            	glo	rb		; complete cmd tail string matched
   2408   d5            	retn
                        FindEoS:
   2409   4d            	lda	rd
   240a   fe            	shl
   240b   cb 24 09      	lbnf	FindEoS		; find end of string (hi bit set)
   240e   2d            	dec	rd
   240f   29            	dec	r9
   2410   09            	ldn	r9		; did we get to the end of the 
   2411   ff 20         	smi	' '		; cmd tail word?
   2413   ca 24 29      	lbnz	DoNextMonth
                        
   2416   8c            	glo	rc		; substr length
   2417   52            	str	r2		; store it for a moment
   2418   87            	glo	r7
   2419   f5            	sd
   241a   cb 24 29      	lbnf	DoNextMonth	; jump if substr lng < longest substr lng
   241d   52            	str	r2
   241e   f8 00         	ldi	0
   2420   a8            	plo	r8		; no month name matched
   2421   02            	ldn	r2
   2422   c2 24 29      	lbz	DoNextMonth	; jump if substr lng = longest substr lng
   2425   8b            	glo	rb
   2426   a8            	plo	r8		; save month name index matched
   2427   8c            	glo	rc
   2428   a7            	plo	r7		; save longest length matched
                        DoNextMonth:
   2429   2b            	dec	rb
   242a   8b            	glo	rb
   242b   ca 23 e1      	lbnz	MonthLoop
   242e   88            	glo	r8
   242f   d5            	retn
                        ;------------------------
                        MonthNames:
   2430   0c            	db	12
   2431   44 65 63 65   	dc	'December'
   2435   6d 62 65 f2   
   2439   4e 6f 76 65   	dc	'November'
   243d   6d 62 65 f2   
   2441   4f 63 74 6f   	dc	'October'
   2445   62 65 f2      
   2448   53 65 70 74   	dc	'September'
   244c   65 6d 62 65   
   2450   f2            
   2451   41 75 67 75   	dc	'August'
   2455   73 f4         
   2457   4a 75 6c f9   	dc	'July'
   245b   4a 75 6e e5   	dc	'June'
   245f   4d 61 f9      	dc	'May'
   2462   41 70 72 69   	dc	'April'
   2466   ec            
   2467   4d 61 72 63   	dc	'March'
   246b   e8            
   246c   46 65 62 72   	dc	'February'
   2470   75 61 72 f9   
   2474   4a 61 6e 75   	dc	'January'
   2478   61 72 f9      
   247b   ff            	db	0ffh
                        ;------------------------
                        ; prtTblStr: print n'th string in a table (end of string marked with hi bit set)
                        ; IN: D = string number (0..N-1)
                        ;    RF = table (N strings with last char MSb set)
                        ;               (table terminated by 0FFH)
                        ;
                        prtTblStr:
   247c   ad            	plo	rd
   247d   ef            	sex	rf
   247e   f7            	sm				; exceeds # of strings in table?
   247f   e2            	sex	r2
   2480   cb 24 84      	lbnf	prtts1	
   2483   d5            	retn				; yep, we are done
                        prtts1:	
   2484   8d            	glo	rd
   2485   c2 24 94      	lbz	FirstStr
                        NextStr:
   2488   1f            	inc	rf
   2489   0f            	ldn	rf
   248a   fa 80         	ani	80h
   248c   c2 24 88      	lbz	NextStr			; not end of this string
   248f   2d            	dec	rd
   2490   8d            	glo	rd
   2491   ca 24 88      	lbnz	NextStr			; got to the string we want yet?
                        FirstStr:
   2494   f8 17         	ldi	23			; total spaces
   2496   ad            	plo	rd
                        StrLoop:
   2497   1f            	inc	rf
   2498   0f            	ldn	rf
   2499   fa 7f         	ani	7fh			; mask off hi bit
   249b   d4 03 30      	call	O_TYPE
   249e   2d            	dec	rd			; decr # spaces required
   249f   0f            	ldn	rf
   24a0   fe            	shl				; put msb in DF
   24a1   cb 24 97      	lbnf	StrLoop			; loop until last char (hi bit set)
                        StrSpaces:
   24a4   f8 20         	ldi	' '			; fill out to 23 chars with spaces
   24a6   d4 03 30      	call	O_TYPE
   24a9   2d            	dec	rd
   24aa   8d            	glo	rd
   24ab   ca 24 a4      	lbnz	StrSpaces
   24ae   d5            	retn
                        ;------------------------
   24af   d4 ff 81      HasRTC:	call	f_getdev		; check that the BIOS thinks
   24b2   8f            	glo	rf
   24b3   fa 10         	ani	b_devRTC		; we have an RTC
   24b5   32 ba         	bz	NoRTC
   24b7   7f 00         	smbi	0			; signal RTC present (DF=1)
   24b9   d5            	retn				; and return
   24ba   fc 00         NoRTC:	adi	0			; clear DF
   24bc   d5            	retn				; and return
                        ;------------------------
                        ;	
                        endrom	equ	$
                        ;
                        ;------------------------
                        ;
                        HasClock ds	1
                        ;
                        DOW1st	ds	1			;\
                        DateBlk:				; \
                        Month	ds	1			;  \
                        Day	ds	1			; NB: these variables must
                        Year	ds	2			; remain together in this
                        Date2Blk:				; order!
                        Month2	ds	1			;  /
                        Day2	ds	1			; /
                        Year2	ds	2			;/
                        ;
                        	ds	64
                        localStack:
                        	ds	1
                        saveStack:
                        	ds	2
                        ;
                        buffer	equ	$
                        ;
                        	end
2356  ansi_hilite    235b  ansi_normal    0004  b_devBBSER    0002  b_devFLPY 
0001  b_devIDE      0020  b_devNVR      0010  b_devRTC      0008  b_devUART 
0007  bell          ff00  BIOS          0008  bs            250a  buffer    
2006  build         23e8  ChkNextChr    000d  cr            2368  crlf      
2002  date          24c3  Date2Blk      24bf  DateBlk       24c0  Day       
24c4  Day2          22a2  DaysInMonth    2429  DoNextMonth    216b  DoTail    
2179  DoTailX       24be  DOW1st        21a8  DoYear        21d0  DoYear1   
f800  EBIOS         24bd  endrom        0005  errdirnotempty    0001  errexists 
0003  errinvdir     0004  errisdir      0002  errnoffnd     0006  errnotexec
001b  esc           20ec  Exit          f830  f_astodt      f833  f_astotm  
ff5d  f_atoi        ff00  f_boot        ff42  f_bootide     f800  f_bread   
ff6c  f_brktest     f806  f_btest       f803  f_btype       ff33  f_div16   
ff2a  f_drive       f827  f_dttoas      ff6f  f_findtkn     ff57  f_freemem 
ff81  f_getdev      f815  f_gettod      ff45  f_hexin       ff48  f_hexout2 
ff4b  f_hexout4     f824  f_ideid       ff3c  f_ideread     ff36  f_idereset
f821  f_idesize     ff39  f_idewrite    ff7b  f_idnum       ff3f  f_initcall
ff66  f_inmsg       ff0f  f_input       ff69  f_inputl      ff63  f_intout  
ff78  f_isalnum     ff72  f_isalpha     ff75  f_ishex       ff5a  f_isnum   
ff7e  f_isterm      ff15  f_ltrim       ff1b  f_memcpy      ff54  f_minimon 
ff51  f_mover       ff09  f_msg         ff30  f_mul16       f836  f_nvrcchk 
f81b  f_rdnvr       ff21  f_rdsec       ff06  f_read        f82d  f_rtctest 
ff27  f_seek        ff24  f_seek0       ff2d  f_setbd       f818  f_settod  
ff12  f_strcmp      ff18  f_strcpy      f82a  f_tmtoas      ff4e  f_tty     
ff03  f_type        ff0c  f_typex       ff60  f_uintout     f80c  f_uread   
f812  f_usetbd      f80f  f_utest       f809  f_utype       fff9  f_version 
f81e  f_wrnvr       ff1e  f_wrtsec      2409  FindEoS       2494  FirstStr  
22cd  FullWeek      21df  FullYear      236f  GetDOW        237c  GetDOW1   
23bb  GetDOW2       23c0  GetDOW3       2157  GotTime       230a  Gt10      
24bd  HasClock      24af  HasRTC        202b  Help          208b  Help2     
22fc  hilite_day    03f6  I_SERVE       0406  K_BDAY        0405  K_BMONTH  
0403  K_BUILD       0407  K_BYEAR       0470  K_CLKFREQ     0476  K_DAY     
044d  K_HEAP        0442  K_HIMEM       0478  K_HOUR        0479  K_MINUTE  
0475  K_MONTH       047b  K_SECDEN      047d  K_SECNUM      047a  K_SECOND  
0400  K_VER         0477  K_YEAR        22d9  LeadingSpace    000a  lf        
2507  localStack    20f7  Main          23d4  MatchMonthName    2199  MonName   
24bf  Month         24c3  Month2        23e1  MonthLoop     2430  MonthNames
22bc  MoveFirst     2291  NextMonth     2488  NextStr       2118  NoClk     
2146  NoClkMsg      2342  normal_day    24ba  NoRTC         23f3  NotLower  
22ff  NotToday1     2345  NotToday2     036c  O_ALLOC       0004  O_APPND   
035a  O_BOOT        0366  O_BRKTEST     0324  O_CHDIR       0300  O_CLDBOOT 
0312  O_CLOSE       0001  O_CREAT       0475  O_DATTIM      036f  O_DEALLOC 
0318  O_DELETE      0369  O_DEVCTRL     031e  O_EXEC        0342  O_EXECBIN 
034e  O_GETDEV      0351  O_GETTOD      0363  O_INITCALL    034b  O_INMSG   
0339  O_INPUT       0357  O_INPUTL      0348  O_KINIT       0321  O_MKDIR   
0333  O_MSG         0306  O_OPEN        0315  O_OPENDIR     033f  O_PRINT   
033c  O_PRTSTAT     032a  O_RDLUMP      0309  O_READ        0336  O_READKEY 
031b  O_RENAME      0327  O_RMDIR       030f  O_SEEK        0360  O_SETBD   
0345  O_SETDEF      0354  O_SETTOD      0002  O_TRUNC       035d  O_TTY     
0330  O_TYPE        030c  O_WRITE       032d  O_WRLUMP      0303  O_WRMBOOT 
247c  prtTblStr     2484  prtts1        0000  r0            0001  r1        
000a  r10           000b  r11           000c  r12           000d  r13       
000e  r14           000f  r15           0002  r2            0003  r3        
0004  r4            0005  r5            0006  r6            0007  r7        
0008  r8            0009  r9            000a  ra            000b  rb        
000c  rc            000d  rd            000e  re            000f  rf        
2508  saveStack     0004  scall         21fa  ShowCal       21a0  SkipRest  
2125  SkipSpaces    21b0  SkipYearSpaces    0005  sret          2028  Start     
2497  StrLoop       24a4  StrSpaces     0009  tab           036a  V_DVEC    
03fd  V_IVEC        23c8  valtab        235f  vt52_hilite    2364  vt52_normal
22d0  WeekLoop      24c1  Year          24c5  Year2         
